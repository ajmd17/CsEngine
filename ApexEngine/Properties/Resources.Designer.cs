//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ApexEngine.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ApexEngine.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Apex 3D standard header, provides additional uniforms for shaders.
        ///// By default, Apex_WorldMatrix, Apex_ViewMatirx, and Apex_ProjectionMatrix 
        ///// are included in all compiled shader programs.
        ///
        ///// The camera&apos;s location.
        ///uniform vec3 Apex_CameraPosition; 
        ///
        ///// The camera&apos;s view direction.
        ///uniform vec3 Apex_CameraDirection;
        ///
        ///// Elapsed global time
        ///uniform float Apex_ElapsedTime;.
        /// </summary>
        internal static string apex3d {
            get {
                return ResourceManager.GetString("apex3d", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Apex 3D Lighting Calculations
        ///const float PI = 3.14159265358979323846;
        ///
        ///struct DirectionalLight {
        ///	vec3 direction;
        ///	vec4 color;
        ///	float intensity;
        ///};
        ///
        ///struct AmbientLight {
        ///	vec4 color;
        ///	float intensity;
        ///};
        ///
        ///uniform DirectionalLight Env_DirectionalLight;
        ///uniform AmbientLight Env_AmbientLight;
        ///
        ///float sqr(float x)
        ///{
        ///    return x*x;
        ///}
        ///
        ///float NormalizedTrowbridgeReitz(float costhetaH, float w)
        ///{
        ///    float w2 = w*w;
        ///    return w2 / (PI * sqr( costhetaH*costhetaH * (w2 - 1) + 1 ));
        ///}
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string lighting {
            get {
                return ResourceManager.GetString("lighting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Apex 3D material header for shaders
        ///
        ///uniform int Material_SpecularTechnique;
        ///uniform int Material_PerPixelLighting;
        ///uniform int Material_HasDiffuseMap;
        ///uniform int Material_HasNormalMap;
        ///uniform int Material_HasSpecularMap;
        ///
        ///uniform float Material_Shininess;
        ///
        ///uniform vec4 Material_AmbientColor;
        ///uniform vec4 Material_DiffuseColor;
        ///uniform vec4 Material_SpecularColor;
        ///
        ///uniform sampler2D Material_DiffuseMap;
        ///uniform sampler2D Material_NormalMap;
        ///uniform sampler2D Material_SpecularMap;.
        /// </summary>
        internal static string material {
            get {
                return ResourceManager.GetString("material", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Apex3D mesh util shader header
        ///
        ///void CalculateTangents(vec3 _normal, vec3 _outTangent, vec3 _outBitangent)
        ///{
        ///	vec3 c1 = cross(_normal, vec3(0.0, 0.0, 1.0));
        ///	vec3 c2 = cross(_normal, vec3(0.0, 1.0, 0.0));
        ///	if (length(c1)&gt;length(c2))
        ///		_outTangent = c1;
        ///	else
        ///		_outTangent = c2;
        ///	v_tangent = normalize(_outTangent);
        ///	v_bitangent = cross(_normal, _outTangent);
        ///	v_bitangent = normalize(_outBitangent);
        ///}.
        /// </summary>
        internal static string mesh {
            get {
                return ResourceManager.GetString("mesh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Hardware skinning shader header
        ///
        ///attribute vec4 a_boneweights;
        ///attribute vec4 a_boneindices;
        ///
        ///// All bone matrices. NUM_BONES will be replaced during the shader 
        ///// pre-compiling stage.
        ///uniform mat4 Bone[$NUM_BONES];
        ///
        ///mat4 CreateSkinningMatrix()
        ///{
        ///	vec4 index = a_boneindices;
        ///	vec4 weight = a_boneweights;
        ///
        ///	mat4 skinning = mat4(0.0);
        ///
        ///	int index0 = int(index.x);
        ///	skinning += weight.x * Bone[index0];
        ///	int index1 = int(index.y);
        ///	skinning += weight.y * Bone[index1];
        ///	int index2 = int(in [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string skinning {
            get {
                return ResourceManager.GetString("skinning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] sphere16 {
            get {
                object obj = ResourceManager.GetObject("sphere16", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] sphere32 {
            get {
                object obj = ResourceManager.GetObject("sphere32", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] sphere8 {
            get {
                object obj = ResourceManager.GetObject("sphere8", resourceCulture);
                return ((byte[])(obj));
            }
        }
    }
}
